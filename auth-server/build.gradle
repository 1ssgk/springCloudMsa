plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.14-SNAPSHOT'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'

	id 'org.asciidoctor.jvm.convert' version '3.3.2'
	id 'com.epages.restdocs-api-spec' version '0.16.2'
}

group = 'com.spring'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
}

ext {
	set('springCloudVersion', "2021.0.7")
	snippetsDir = file('build/generated-snippets') //  asciidoctor add
}

dependencies {
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// Spring Cloud Bus + RabbitMQ
	implementation 'org.springframework.cloud:spring-cloud-starter-bus-amqp'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'

	implementation 'org.springframework.cloud:spring-cloud-starter-config'

	runtimeOnly 'com.h2database:h2'

	implementation 'com.google.api-client:google-api-client:2.2.0'

	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	testImplementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'


	// RestDoc to Open API
	implementation 'org.springdoc:springdoc-openapi-ui:1.6.15'
	testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.16.2'
	// restdocs-mockmvc의 testCompile 구성
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

	//implementation 'org.springdoc:springdoc-openapi-ui:1.6.15'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.amqp:spring-rabbit-test'
	testImplementation 'org.springframework.security:spring-security-test'

	testImplementation("org.junit.jupiter:junit-jupiter")

	//restAssured
	testImplementation 'io.rest-assured:rest-assured'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy 'openapi3' // added
	// snippetsDir 디렉토리를 test의 output으로 구성하는 설정 -> 스니펫 조각들이 build/generated-snippets로 출력
	outputs.dir snippetsDir
}

// rest docs open api
openapi3 {
	println("project.rootProject.rootDir: $project.rootProject.rootDir")
	println("project.name: ${project.name}")

	server = 'https://localhost:40004'
	title = 'My API'
	description = 'My API description'
	// tagDescriptionsPropertiesFile = "${project.rootProject.projectDir}/docs/tag-descriptions.yml"
	version = '0.1.0'
	format = 'json'
	outputDirectory = 'src/main/resources/static/docs'
	outputFileNamePrefix = "openapi3.${project.name}"

	project.mkdir "${project.projectDir}/${outputDirectory}"
}


asciidoctor { // asciidoctor 작업 구성
	dependsOn test		// test 작업 이후에 작동하도록 하는 설정
	attributes 'snippets': snippetsDir
	inputs.dir snippetsDir		//	snippetsDir 를 입력으로 구성
}

asciidoctor.doFirst { // static/docs 폴더 비우기
	println("---------------- delete present asciidoctor.")
	delete file('src/main/resources/static/docs')
}

bootJar { // add
	dependsOn asciidoctor
	copy {
		from "${asciidoctor.outputDir}"
		into 'src/main/resources/static/docs'
	}
}